/**
 * @file vacRadarCommon.h
 * @brief 
 * 定义Rs485协议中的识别字段和相关结构体 
 *
 * 
 * @see vacRadarCommon
 *
 * @author Z. W. 
 * @version 0.1.0
 * @date 2014/02/19
 */
#ifndef VACRADARCOMMON_H
#define VACRADARCOMMON_H

///测试模式     
/*1：使用已经分配好的端口、IP，无需界面输入		
.* 0：需要界面输入服务器、客户端的IP和端口
*/
#define TEST_MODE 1

typedef unsigned char INT8U;
typedef unsigned short INT16U;
typedef unsigned int INT32U;

//mask
const INT16U cOBJ_ID_MASK=0XFC00;
const INT16U cOBJ_LEN_MASK=0X3FC;
const INT32U cOBJ_YV_MASK=0X3FF8000;
const INT32U cOBJ_XV_MASK=0X7FF0;
const INT32U cOBJ_YC_MASK=0XFFFC000;
const INT32U cOBJ_XC_MASK=0X3FFF;

//Rs485消息结构
//star sequence AND end sequence
const INT32U cSTART_SEQ_CONTROLLER2SENSOR=0XADACABAA;
const INT32U cSTART_SEQ_SENSOR2CONTROLLER=0XCDCCCBCA;
const INT32U cSTART_SEQ_SENSOR_COMMAND_RESPONSE=0XBDBCBBBA;
const INT32U cEND_SEQ_CONTROLLER2SENSOR=0XDDDCDBDA;
const INT32U cEND_SEQ_SENSOR2CONTROLLER=0XEDECEBEA;
const INT32U cEND_SEQ_SENSOR_COMMAND_RESPONSE=0XFDFCFBFA;

//CAN消息结构  
//Message Identifier
//控制端软件加载
const INT16U cMID_CAN_BOOT_DATA=0XF403;
//控制端命令
const INT16U cMID_COMMAND_MESSAGE=0XF203;
//传感器加载返回
const INT16U cMID_SENSOR_ECHO_0=0X2003; 
const INT16U cMID_SENSOR_ECHO_1=0X2103;
const INT16U cMID_SENSOR_ECHO_2=0X2203;
const INT16U cMID_SENSOR_ECHO_3=0X2303;
//传感器控制
const INT16U cMID_SENSOR_CONTROL_0=0X0005;
const INT16U cMID_SENSOR_CONTROL_1=0X8005;
const INT16U cMID_SENSOR_CONTROL_2=0X0006;
const INT16U cMID_SENSOR_CONTROL_3=0X8006;
//目标控制
const INT16U cMID_OBJECT_CONTROL_0=0X0105;
const INT16U cMID_OBJECT_CONTROL_1=0X8105;
const INT16U cMID_OBJECT_CONTROL_2=0x0106;
const INT16U cMID_OBJECT_CONTROL_3=0x8106;
//目标数据
const INT16U cMID_OBJECT_0_DATA_0=0X1005;
const INT16U cMID_OBJECT_0_DATA_1=0X9005;
const INT16U cMID_OBJECT_0_DATA_2=0X1006;
const INT16U cMID_OBJECT_0_DATA_3=0X9006;
//
const INT16U cMID_OBJECT_0_DATA_0_R=0X0510;
const INT16U cMID_OBJECT_0_DATA_1_R=0X0590;
const INT16U cMID_OBJECT_0_DATA_2_R=0X0610;
const INT16U cMID_OBJECT_0_DATA_3_R=0X0690;
//读取传感器参数
const INT16U cMID_SENSOR_PARA_READ=0X0004;
//同步
const INT16U cMID_SYN_MESSAGE=0XFF02;
//can消息长度
const INT8U cCAN_MESSAGE_LENGTH=0X08;



//0780
const INT16U cMID_0780_0=0x8007;
const INT16U cMID_0780_1=0x8807;
const INT16U cMID_0780_2=0x9007;
const INT16U cMID_0780_3=0x9807;

//0781
const INT16U cMID_0781_0=0x8107;
const INT16U cMID_0781_1=0x8907;
const INT16U cMID_0781_2=0x9107;
const INT16U cMID_0781_3=0x9907;

//0782
const INT16U cMID_0782_0=0x8207;
const INT16U cMID_0782_1=0x8A07;
const INT16U cMID_0782_2=0x9207;
const INT16U cMID_0782_3=0x9A07;

//0783
const INT16U cMID_0783_0=0x8307;
const INT16U cMID_0783_1=0x8B07;
const INT16U cMID_0783_2=0x9307;
const INT16U cMID_0783_3=0x9B07;

//0784
const INT16U cMID_0784_0=0x8407;
const INT16U cMID_0784_1=0x8C07;
const INT16U cMID_0784_2=0x9407;
const INT16U cMID_0784_3=0x9C07;





//Can数据负载
typedef struct _tagCanDataPayload
{
	INT8U nByte0;
	INT8U nByte1;
	INT8U nByte2;
	INT8U nByte3;
	INT8U nByte4;
	INT8U nByte5;
	INT8U nByte6;
	INT8U nByte7;
}CAN_DATA_PAY_LOAD,*pCAN_DATA_PAY_LOAD;

//Can包
typedef struct _tagCanBlock
{
	INT16U nCanID;
	INT8U nCanMsgLen;
	CAN_DATA_PAY_LOAD nCanData;
}CAN_BLOCK,*pCAN_BLOCK;

//Rs485包
typedef struct _tagRs485Block
{
	INT32U nStartSeq;
	CAN_BLOCK DataPayload;
	INT8U nChecksum;
	INT32U nEndSeq;	
}RS485_BLOCK,*pRS485_BLOCK;








#endif